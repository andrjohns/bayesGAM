// Generated by rstantools.  Do not edit by hand.

/*
    mvgamHMC is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mvgamHMC is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mvgamHMC.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_glm_discrete_with_qr_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_glm_discrete_with_qr");
    reader.add_event(178, 176, "end", "model_glm_discrete_with_qr");
    return reader;
}
#include <stan_meta_header.hpp>
class model_glm_discrete_with_qr
  : public stan::model::model_base_crtp<model_glm_discrete_with_qr> {
private:
        int N;
        int p;
        std::vector<int> y;
        matrix_d X;
        int qr;
        int famnum;
        int linknum;
        vector_d offset;
        std::vector<int> betanum;
        int beta_max_params;
        matrix_d beta_param;
        matrix_d Q_x;
        matrix_d R_x;
        matrix_d R_x_inverse;
public:
    model_glm_discrete_with_qr(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_glm_discrete_with_qr(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_glm_discrete_with_qr_namespace::model_glm_discrete_with_qr";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            current_statement_begin__ = 9;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "p", p);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,p));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, p);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = p;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "qr", "int", context__.to_vec());
            qr = int(0);
            vals_i__ = context__.vals_i("qr");
            pos__ = 0;
            qr = vals_i__[pos__++];
            check_greater_or_equal(function__, "qr", qr, 0);
            check_less_or_equal(function__, "qr", qr, 1);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "famnum", "int", context__.to_vec());
            famnum = int(0);
            vals_i__ = context__.vals_i("famnum");
            pos__ = 0;
            famnum = vals_i__[pos__++];
            check_greater_or_equal(function__, "famnum", famnum, 1);
            check_less_or_equal(function__, "famnum", famnum, 3);
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "linknum", "int", context__.to_vec());
            linknum = int(0);
            vals_i__ = context__.vals_i("linknum");
            pos__ = 0;
            linknum = vals_i__[pos__++];
            current_statement_begin__ = 19;
            validate_non_negative_index("offset", "N", N);
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec(N));
            offset = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < offset_j_1_max__; ++j_1__) {
                offset(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("betanum", "(p + 1)", (p + 1));
            context__.validate_dims("data initialization", "betanum", "int", context__.to_vec((p + 1)));
            betanum = std::vector<int>((p + 1), int(0));
            vals_i__ = context__.vals_i("betanum");
            pos__ = 0;
            size_t betanum_k_0_max__ = (p + 1);
            for (size_t k_0__ = 0; k_0__ < betanum_k_0_max__; ++k_0__) {
                betanum[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "beta_max_params", "int", context__.to_vec());
            beta_max_params = int(0);
            vals_i__ = context__.vals_i("beta_max_params");
            pos__ = 0;
            beta_max_params = vals_i__[pos__++];
            current_statement_begin__ = 28;
            validate_non_negative_index("beta_param", "p", p);
            validate_non_negative_index("beta_param", "beta_max_params", beta_max_params);
            context__.validate_dims("data initialization", "beta_param", "matrix_d", context__.to_vec(p,beta_max_params));
            beta_param = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, beta_max_params);
            vals_r__ = context__.vals_r("beta_param");
            pos__ = 0;
            size_t beta_param_j_2_max__ = beta_max_params;
            size_t beta_param_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < beta_param_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_param_j_1_max__; ++j_1__) {
                    beta_param(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 33;
            validate_non_negative_index("Q_x", "N", N);
            validate_non_negative_index("Q_x", "p", p);
            Q_x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, p);
            stan::math::fill(Q_x, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("R_x", "p", p);
            validate_non_negative_index("R_x", "p", p);
            R_x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, p);
            stan::math::fill(R_x, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("R_x_inverse", "p", p);
            validate_non_negative_index("R_x_inverse", "p", p);
            R_x_inverse = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, p);
            stan::math::fill(R_x_inverse, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 38;
            stan::math::assign(Q_x, multiply(stan::model::rvalue(qr_Q(X), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), "qr_Q(X)"), stan::math::sqrt((N - 1))));
            current_statement_begin__ = 39;
            stan::math::assign(R_x, divide(stan::model::rvalue(qr_R(X), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "qr_R(X)"), stan::math::sqrt((N - 1))));
            current_statement_begin__ = 40;
            stan::math::assign(R_x_inverse, inverse(R_x));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 46;
            validate_non_negative_index("theta_b", "p", p);
            num_params_r__ += p;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_glm_discrete_with_qr() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 46;
        if (!(context__.contains_r("theta_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_b");
        pos__ = 0U;
        validate_non_negative_index("theta_b", "p", p);
        context__.validate_dims("parameter initialization", "theta_b", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_b(p);
        size_t theta_b_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < theta_b_j_1_max__; ++j_1__) {
            theta_b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_b;
            (void) theta_b;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_b = in__.vector_constrain(p, lp__);
            else
                theta_b = in__.vector_constrain(p);
            // model body
            current_statement_begin__ = 53;
            for (int k1 = 1; k1 <= p; ++k1) {
                current_statement_begin__ = 54;
                if (as_bool(logical_eq(get_base1(betanum, k1, "betanum", 1), 1))) {
                    current_statement_begin__ = 55;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta_b, k1, "theta_b", 1), get_base1(beta_param, k1, 1, "beta_param", 1), get_base1(beta_param, k1, 2, "beta_param", 1)));
                } else if (as_bool(logical_eq(get_base1(betanum, k1, "betanum", 1), 2))) {
                    current_statement_begin__ = 57;
                    lp_accum__.add(student_t_log<propto__>(get_base1(theta_b, k1, "theta_b", 1), get_base1(beta_param, k1, 1, "beta_param", 1), get_base1(beta_param, k1, 2, "beta_param", 1), get_base1(beta_param, k1, 3, "beta_param", 1)));
                }
            }
            current_statement_begin__ = 62;
            if (as_bool(logical_eq(famnum, 2))) {
                current_statement_begin__ = 64;
                if (as_bool(logical_eq(linknum, 4))) {
                    current_statement_begin__ = 65;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 66;
                        lp_accum__.add(bernoulli_logit_log<propto__>(y, add(multiply(Q_x, theta_b), offset)));
                    } else {
                        current_statement_begin__ = 68;
                        lp_accum__.add(bernoulli_logit_log<propto__>(y, add(multiply(X, theta_b), offset)));
                    }
                } else if (as_bool(logical_eq(linknum, 5))) {
                    current_statement_begin__ = 72;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 73;
                        lp_accum__.add(bernoulli_log<propto__>(y, Phi(add(multiply(Q_x, theta_b), offset))));
                    } else {
                        current_statement_begin__ = 75;
                        lp_accum__.add(bernoulli_log<propto__>(y, Phi(add(multiply(X, theta_b), offset))));
                    }
                } else if (as_bool(logical_eq(linknum, 6))) {
                    current_statement_begin__ = 79;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 80;
                        lp_accum__.add(bernoulli_log<propto__>(y, add(divide(stan::math::atan(add(multiply(Q_x, theta_b), offset)), stan::math::pi()), 0.5)));
                    } else {
                        current_statement_begin__ = 82;
                        lp_accum__.add(bernoulli_log<propto__>(y, add(divide(stan::math::atan(add(multiply(X, theta_b), offset)), stan::math::pi()), 0.5)));
                    }
                } else if (as_bool(logical_eq(linknum, 2))) {
                    current_statement_begin__ = 86;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 87;
                        lp_accum__.add(bernoulli_log<propto__>(y, stan::math::exp(add(multiply(Q_x, theta_b), offset))));
                    } else {
                        current_statement_begin__ = 89;
                        lp_accum__.add(bernoulli_log<propto__>(y, stan::math::exp(add(multiply(X, theta_b), offset))));
                    }
                } else if (as_bool(logical_eq(linknum, 7))) {
                    current_statement_begin__ = 93;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 94;
                        lp_accum__.add(bernoulli_log<propto__>(y, inv_cloglog(add(multiply(Q_x, theta_b), offset))));
                    } else {
                        current_statement_begin__ = 96;
                        lp_accum__.add(bernoulli_log<propto__>(y, inv_cloglog(add(multiply(X, theta_b), offset))));
                    }
                }
            } else if (as_bool(logical_eq(famnum, 3))) {
                current_statement_begin__ = 104;
                if (as_bool(logical_eq(linknum, 2))) {
                    current_statement_begin__ = 105;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 106;
                        lp_accum__.add(poisson_log_log<propto__>(y, add(multiply(Q_x, theta_b), offset)));
                    } else {
                        current_statement_begin__ = 108;
                        lp_accum__.add(poisson_log_log<propto__>(y, add(multiply(X, theta_b), offset)));
                    }
                } else if (as_bool(logical_eq(linknum, 1))) {
                    current_statement_begin__ = 112;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 113;
                        lp_accum__.add(poisson_log<propto__>(y, add(multiply(Q_x, theta_b), offset)));
                    } else {
                        current_statement_begin__ = 115;
                        lp_accum__.add(poisson_log<propto__>(y, add(multiply(X, theta_b), offset)));
                    }
                } else if (as_bool(logical_eq(linknum, 8))) {
                    current_statement_begin__ = 119;
                    if (as_bool(logical_eq(qr, 1))) {
                        current_statement_begin__ = 120;
                        lp_accum__.add(poisson_log<propto__>(y, square(add(multiply(Q_x, theta_b), offset))));
                    } else {
                        current_statement_begin__ = 122;
                        lp_accum__.add(poisson_log<propto__>(y, square(add(multiply(X, theta_b), offset))));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta_b");
        names__.push_back("beta");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_glm_discrete_with_qr_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_b = in__.vector_constrain(p);
        size_t theta_b_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < theta_b_j_1_max__; ++j_1__) {
            vars__.push_back(theta_b(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 129;
            validate_non_negative_index("beta", "p", p);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(p);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 130;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 132;
            if (as_bool(logical_eq(qr, 1))) {
                current_statement_begin__ = 133;
                stan::math::assign(beta, multiply(R_x_inverse, theta_b));
            } else {
                current_statement_begin__ = 135;
                stan::math::assign(beta, theta_b);
            }
            current_statement_begin__ = 139;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 141;
                if (as_bool(logical_eq(famnum, 2))) {
                    current_statement_begin__ = 143;
                    if (as_bool(logical_eq(linknum, 4))) {
                        current_statement_begin__ = 144;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    bernoulli_logit_log(get_base1(y, n, "y", 1), multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta)), 
                                    "assigning variable log_lik");
                    } else if (as_bool(logical_eq(linknum, 5))) {
                        current_statement_begin__ = 147;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    bernoulli_log(get_base1(y, n, "y", 1), Phi(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta))), 
                                    "assigning variable log_lik");
                    } else if (as_bool(logical_eq(linknum, 6))) {
                        current_statement_begin__ = 150;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    bernoulli_log(get_base1(y, n, "y", 1), ((stan::math::atan(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta)) / stan::math::pi()) + 0.5)), 
                                    "assigning variable log_lik");
                    } else if (as_bool(logical_eq(linknum, 2))) {
                        current_statement_begin__ = 153;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    bernoulli_log(get_base1(y, n, "y", 1), stan::math::exp(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta))), 
                                    "assigning variable log_lik");
                    } else if (as_bool(logical_eq(linknum, 7))) {
                        current_statement_begin__ = 156;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    bernoulli_log(get_base1(y, n, "y", 1), inv_cloglog(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta))), 
                                    "assigning variable log_lik");
                    }
                } else if (as_bool(logical_eq(famnum, 3))) {
                    current_statement_begin__ = 163;
                    if (as_bool(logical_eq(linknum, 2))) {
                        current_statement_begin__ = 164;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    poisson_log_log(get_base1(y, n, "y", 1), multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta)), 
                                    "assigning variable log_lik");
                    } else if (as_bool(logical_eq(linknum, 1))) {
                        current_statement_begin__ = 167;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    poisson_log(get_base1(y, n, "y", 1), multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta)), 
                                    "assigning variable log_lik");
                    } else if (as_bool(logical_eq(linknum, 8))) {
                        current_statement_begin__ = 170;
                        stan::model::assign(log_lik, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    poisson_log(get_base1(y, n, "y", 1), square(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), beta))), 
                                    "assigning variable log_lik");
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 129;
            size_t beta_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                vars__.push_back(beta(j_1__));
            }
            current_statement_begin__ = 130;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_glm_discrete_with_qr";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_b_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < theta_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_b_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < theta_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_glm_discrete_with_qr_namespace::model_glm_discrete_with_qr stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
